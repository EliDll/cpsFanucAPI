PROGRAM k_sktMsg_c

%NOLOCKGROUP
%NOBUSYLAMP

VAR
	connFile : FILE
	ramFile : FILE
	STATUS : INTEGER

	-- only for debug printing the saved ramfile
	printStr : String[40]
	count : INTEGER

%INCLUDE ../util/util

ROUTINE connectServ(serverTag : STRING)
BEGIN
	MSG_DISCO(serverTag, STATUS)
	MSG_CONNECT(serverTag, STATUS)

	checkError('Connecting to Server', STATUS)

	-- Open File
	OPEN FILE connFile('RW', serverTag)

	STATUS = IO_STATUS(connFile)

	checkError('Opening File.', STATUS)
END connectServ

ROUTINE requestData(file_path : STRING) : INTEGER
VAR
	nBytes : INTEGER
	serverMsg : STRING[254]
BEGIN
	WRITE connFile('GET /robot_position/?format=json', CR, CR)
	REPEAT
		BYTES_AHEAD(connFile, nBytes, STATUS)           
		IF STATUS <> 0 THEN
			RETURN (-1)
		ENDIF
		DELAY 100
	UNTIL nBytes > 0
	
	OPEN FILE ramFile('RW', file_path)
	STATUS = IO_STATUS(ramFile)
	checkError('Opening RAMFile', STATUS)

	WHILE nBytes > 0 DO
		READ connFile(serverMsg::nBytes)
		STATUS = IO_STATUS(connFile)

		checkError('I/O_Status (File)', STATUS)

		--wrapPrint(serverMsg)
		WRITE ramFile(serverMsg)
		
		BYTES_AHEAD(connFile, nBytes, STATUS)           
		IF STATUS <> 0 THEN
			CLOSE FILE ramFile
			RETURN (-1)
		ENDIF
		
	ENDWHILE
	CLOSE FILE ramFile
	RETURN (0)
END requestData
   
BEGIN
	connectServ('C3:')
	STATUS  = requestData('PIP:read.dt')
	checkError('requestData', STATUS)
	CLOSE FILE connFile

	-- debug printing the saved ramfile
	OPEN FILE ramFile('RO', 'PIP:read.dt')
	STATUS = IO_STATUS(ramFile)
	checkError('Open RAMFILE', STATUS)
	
	SET_FILE_ATR(ramFile, ATR_PIPWAIT, WAIT_USED) -- force READS to wait
	SET_FILE_ATR(ramFile, ATR_TIMEOUT, (1*1000))  -- READs timeout after 1*1000ms
	
	--SET_FILE_POS(ramFile, 400, STATUS)
	--checkError('set pos', STATUS)
	
	BYTES_AHEAD(ramFile, count, STATUS)
	checkError('Bytes Ahead 0', STATUS)
	
	WHILE count > 0 DO
		IF count >= 40 THEN
			READ ramFile(printStr::40)
			WRITE(printStr, CR)
		ELSE
			READ ramFile(printStr::count)
			printStr = SUB_STR(printStr, 1, count)
			WRITE(printStr, CR)
		ENDIF
	
		BYTES_AHEAD(ramFile, count, STATUS)
		checkError('Bytes Ahead 1', STATUS)
	
	ENDWHILE
		

END k_sktMsg_c
