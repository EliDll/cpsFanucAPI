PROGRAM test_varlist
%COMMENT = 'Parse list of struct tags'
--<test_struct int_val="10" float_val="-2.7" string_val="abc"/>

%ENVIRONMENT xml
%INCLUDE klerxmlf

CONST 
	list_tag = 3
	struct_tag = 4

TYPE
	struct_t = STRUCTURE
	int_val: INTEGER
	float_val: REAL
	string_val: STRING[32] --max is 254
	ENDSTRUCTURE


VAR
	structs: ARRAY [32] OF struct_t
	buffer_struct: struct_t
	tag_id: INTEGER -- id of last scanned tag
	tag_string: STRING[32] -- last scanned tagname
	func_code: INTEGER -- tag type of last scan

	status: INTEGER -- function return status storage

	xml_file: FILE

	start_list: BOOLEAN
	end_list: BOOLEAN

	next_index: INTEGER
	i: INTEGER

BEGIN
WRITE('BEGIN', CR)
	
SET_FILE_ATR (xml_file, ATR_XML)
CLR_IO_STAT(xml_file)

OPEN FILE xml_file ('RO', 'MC:nested_list.xml') -- read only
status = IO_STATUS(xml_file)

-- register tag to be detected by scan
XML_ADDTAG(xml_file, 'list_tag', 16, FALSE, list_tag, status)
XML_ADDTAG(xml_file, 'struct_tag', 16, FALSE,struct_tag, status)

start_list = FALSE
end_list = FALSE
next_index = 1

-- scan until list start tag is found
WHILE (start_list = FALSE) DO
	XML_SCAN(xml_file, tag_string, tag_id, func_code, status)
	IF ( status = 0) THEN
		WRITE('EOF', CR)
		start_list = TRUE
	ENDIF
	IF (status = XML_FUNCTION) THEN
		IF (tag_id = list_tag) THEN
		WRITE('found list start', CR)
		start_list = TRUE
		ENDIF
	ELSE
	WRITE('ERR', status, CR)
	ABORT
	ENDIF
ENDWHILE

-- scan list elements until end tag is found
WHILE ((end_list = FALSE) AND (next_index <= 32)) DO
	XML_SCAN(xml_file, tag_string, tag_id, func_code, status)
	IF ( status = 0) THEN
		WRITE('EOF', CR)
		end_list = TRUE
	ENDIF
	IF (status = XML_FUNCTION) THEN
		SELECT tag_id OF
			CASE(list_tag):
				WRITE('found list end', CR)
				end_list = TRUE
			CASE(struct_tag):
				WRITE('adding struct: ', next_index, CR)
				XML_SETVAR(xml_file, 'test_varlist', 'buffer_struct', status)
				structs[next_index] = buffer_struct
				next_index = next_index + 1
		ENDSELECT
	ELSE
	WRITE('ERR', status, CR)
	ABORT
	ENDIF
ENDWHILE

FOR i = 1 TO (next_index -1) DO
		WRITE('Struct ', i, CR)
		WRITE('	int_val:', structs[i].int_val, '  ')
		WRITE('	float_val:', structs[i].float_val, '  ')
		WRITE('	string_val:', structs[i].string_val, CR)
ENDFOR

WRITE('END', CR)
END test_varlist