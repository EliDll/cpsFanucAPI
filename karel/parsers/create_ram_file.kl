PROGRAM create_ram_file
	CONST
		file_path = 'RD:test_file.dt'
	VAR
		file_var : FILE
		read_str: STRING[254]
		buffer_string: STRING[254]
		read_starting_from: INTEGER
		file_position_after_writing : INTEGER
		file_position : INTEGER
		status: INTEGER

	ROUTINE readRamFileFromIndex(file_path: STRING; index, file_length: INTEGER): STRING
	VAR
		buffer_string: STRING[254]
		read_str: STRING[254]
	BEGIN
		-- reopen it with ud to reset position
		OPEN FILE file_var ('UD', file_path)
		status = IO_STATUS(file_var)
		WRITE('open status inside routine', status, CR)

		READ file_var(buffer_string::index)
		status = IO_STATUS(file_var)
		WRITE('read status inside rputine', status, CR)

		file_position = GET_FILE_POS(file_var)

		READ file_var(read_str::file_length-file_position)
		status = IO_STATUS(file_var)
		WRITE('read status ', status, CR)
		WRITE('Read string ', read_str, CR)
		RETURN (read_str)
	END readRamFileFromIndex

	BEGIN
		-- variable initialitazion and prints
		WRITE('begin script', CR)
		read_str = ''

		-- creation of RAM file (RW creates the file if it is not already there)
		OPEN FILE file_var ('RW', file_path)
		status = IO_STATUS(file_var)
		WRITE('open status ', status, CR)

		-- check initial RAM file position
		file_position = GET_FILE_POS(file_var)
		WRITE('file position ', file_position, CR)

		-- write test string into the file
		WRITE file_var ('Test string')
		status = IO_STATUS(file_var)
		WRITE('write status ', status, CR)

		-- check the position has been updated
		file_position_after_writing = GET_FILE_POS(file_var)
		WRITE('file position after writing', file_position_after_writing, CR)

		-- close file 
		CLOSE FILE file_var

		-- reopen it with ud to reset position
		OPEN FILE file_var ('UD', file_path)
		status = IO_STATUS(file_var)
		WRITE('open status ', status, CR)

		-- check position has been reset
		file_position = GET_FILE_POS(file_var)
		WRITE('file position ', file_position, CR)

		-- read the file
		-- goal: access the file at a given 'position' and read from there
		READ file_var(read_str::file_position_after_writing)
		status = IO_STATUS(file_var)
		WRITE('read status ', status, CR)
		WRITE('Read string ', read_str, CR)

		-- close file 
		CLOSE FILE file_var

		read_starting_from = 5

		-- reopen it with ud to reset position
		OPEN FILE file_var ('UD', file_path)
		status = IO_STATUS(file_var)
		WRITE('open status ', status, CR)

		READ file_var(buffer_string::read_starting_from)
		status = IO_STATUS(file_var)
		WRITE('read status ', status, CR)

		-- check position has been reset
		file_position = GET_FILE_POS(file_var)
		WRITE('file position ', file_position, CR)

		-- BYTES_AHEAD(file_var, file_position_after_writing, status)

		-- WRITE('Bytes ahead status ', status, CR)

		READ file_var(read_str::file_position_after_writing-file_position)
		status = IO_STATUS(file_var)
		WRITE('read status ', status, CR)
		WRITE('Read string ', read_str, CR)


END create_ram_file