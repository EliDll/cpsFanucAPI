PROGRAM test_picking_point_parser
%NOLOCKGROUP
%NOBUSYLAMP

TYPE
    picking_point = STRUCTURE
        picker_position: XYZWPR
    ENDSTRUCTURE
    
VAR
 	test_json : STRING[254]
 	res : picking_point
	text_index: INTEGER
ROUTINE parsePickingPoint(original_text: STRING; text_index: INTEGER)
----------------------------------------------------
-- Creation date: 2020.04.15
-- Created by: 
----------------------------------------------------
-- Function: 
----------------------------------------------------
-- Arguments: 
----------------------------------------------------
-- Return value: 
----------------------------------------------------
-- Last modified: 2020.04.15
-- Last modified by: 
----------------------------------------------------
	
	VAR
	    x : REAL
	    y : REAL
	    z : REAL
	    w : REAL
	    p : REAL
	    r : REAL
	    c : STRING[1]
	    c_1 : STRING[1]
	    string_value : STRING[20]
	    key_pointer : INTEGER
	    searching : BOOLEAN
	    candidate : STRING[3]
	    loop1 : BOOLEAN
	    reading : BOOLEAN
	    v : REAL
	    ret_val : picking_point
	BEGIN
	    searching = TRUE
	    key_pointer = 0
	    candidate = ''
	    loop1 = TRUE
	    reading = FALSE
	    string_value = ''
	    -- prints for testing
	    WRITE('text_index', text_index, CR)
	    WRITE('original text', original_text, CR)
	    
	     WHILE loop1 = TRUE DO
			c = SUB_STR(original_text, text_index, 1)
            text_index = text_index + 1
            IF searching = TRUE THEN
                IF ((((key_pointer = 0) OR (key_pointer=2)) AND (c = '"')) OR ((key_pointer = 1) AND ((c = 'x') OR (c='y')))) THEN
                     candidate = candidate + c
                     WRITE('candidate=', candidate, CR)
                     key_pointer = key_pointer + 1
                ELSE
	                candidate = ''
	                key_pointer = 0
	            ENDIF
                IF key_pointer = 3 THEN
                    searching = FALSE
                    key_pointer = 0
                    c_1 = SUB_STR(candidate, 2, 1)
                ENDIF
           	-- ELSE -- this guy
             	    --IF c = ':' THEN
	         	    --  reading = TRUE
	    		    -- ENDIF
                	-- IF ((c = ',') OR (c = '}')) THEN
	                	searching = TRUE
	                	reading = FALSE
	                --	WRITE('testone')
	                --	WRITE('c1=', c_1, CR)
	                --	WRITE('string_value=', string_value, CR)
	                --	candidate = ''
                	-- ENDIF
	            	IF c = '}' THEN
	                	loop1 = FALSE
	            	ENDIF
            ENDIF
          ENDWHILE
            WRITE('final candidate', candidate, CR)
	END parsePickingPoint

BEGIN
    test_json = '{"x":0, "y":0, "z":0, "w":0, "p":0, "r":0}'
    text_index = 2
    parsePickingPoint(test_json, text_index)
END test_picking_point_parser
