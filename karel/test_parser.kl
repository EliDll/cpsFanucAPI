PROGRAM test_parser
%COMMENT = 'Parse XML to struct(s)'

%ENVIRONMENT xml -- TODO check what this does

%INCLUDE klerxmlf -- TODO check what this does

--<test_struct int_val="10" float_val="-2.7" string_val="abc"/>
CONST
	my_tag_id = 3

TYPE
	test_struct = STRUCTURE
	int_val: INTEGER
	float_val: REAL
	string_val: STRING[32] --max is 254
	ENDSTRUCTURE


VAR
	strct: test_struct
	tag_id: INTEGER -- used to switch over scan result, bound to specific string ID
	tag_string: STRING[32] -- returned by scan
	func_code: INTEGER -- specific return status of scan
	
	x: STRING[32]


	xml_file: FILE -- file handle

	status: INTEGER -- variable to store various exit statusses
	eof: BOOLEAN
	done: BOOLEAN

%INCLUDE console/print_utils

BEGIN
done = FALSE
SET_FILE_ATR (xml_file, ATR_XML) -- set to be usable by xml functions
CLR_IO_STAT(xml_file) -- TODO check what this does
WRITE('BEGIN', CR)
OPEN FILE xml_file ('RO', 'MC:basic.xml') -- read only
status = IO_STATUS(xml_file)

-- register tag to be detected by scan
XML_ADDTAG(xml_file, 'test_struct', 32, FALSE,my_tag_id, status)
WRITE('added tag',  CR)
	
--READ xml_file(x::32)
--WRITE(x, CR)

-- scan once
XML_SCAN(xml_file, tag_string, tag_id, func_code, status)
IF (status = 0) THEN -- end of file reached
	eof = TRUE
	WRITE('eof', CR)
ENDIF


IF (status = XML_FUNCTION) THEN -- succesfully scanned tag
	SELECT func_code OF
		CASE (XML_START): -- found start of tag
		WRITE('start of tag', CR)
		XML_SETVAR(xml_file, 'test_parser', 'strct', status)
		WRITE('int_val:', strct.int_val, CR)
		WRITE('float_val:', strct.float_val, CR)
		WRITE('string_val:', strct.string_val, CR)
		CASE (XML_STEND): -- scanned tag is never terminated
		WRITE('XML_STEND')
		CASE (XML_END): -- found closing tag OR END OF self-contained tag
		WRITE('end of tag', CR)
		XML_SETVAR(xml_file, 'test_parser', 'strct', status)
		WRITE('int_val:', strct.int_val, CR)
		WRITE('float_val:', strct.float_val, CR)
		WRITE('string_val:', strct.string_val, CR)
	ENDSELECT
ELSE
	done = TRUE
	WRITE('err status', status)	
ENDIF

XML_SCAN(xml_file, tag_string, tag_id, func_code, status)
IF (status = 0) THEN -- end of file reached
	eof = TRUE
	WRITE('eof', CR)
ENDIF
WRITE('scanning',  CR)
IF (status = XML_FUNCTION) THEN -- succesfully scanned tag
	SELECT func_code OF
		CASE (XML_START): -- found start of tag
		WRITE('start of tag', CR)
		CASE (XML_STEND): -- scanned tag is never terminated
		WRITE('XML_STEND')
		CASE (XML_END): -- found closing tag OR END OF self-contained tag
		WRITE('end of tag', CR)
	ENDSELECT
ELSE
	WRITE('err status', status)	
ENDIF

XML_SCAN(xml_file, tag_string, tag_id, func_code, status)
IF (status = 0) THEN -- end of file reached
	eof = TRUE
	WRITE('eof', CR)
ENDIF

WRITE('END', CR)

END test_parser


