PROGRAM xml_client

	%INCLUDE ../types
	%INCLUDE klerxmlf


CONST
	-- mandatory global declarations
	PROGRAM_NAME = 'xml_client'
	pipe_path = 'PIP:pipe.dt'
	BUFFER_NAME = 'bufferStruct' -- global ID of var below
	CONNECTION_TAG = 'C3:'
	
	relativePos = FALSE

VAR
	bufferStruct: struct_t -- buffer for xml_scan, that needs static variable name as parameter
	-- mandatory global declarations
	STATUS: INTEGER

	--file declarations must be global, declare socket file for REST calls here
	socketFile: FILE
	
	--output file for REST calls
	pipeFile: FILE
	
	log: FILE
	timeLog: FILE
	structs: ARRAY [16] OF struct_t
	i: INTEGER
	j: INTEGER
	n: INTEGER
	timeRTT: INTEGER
	timeXML: INTEGER
	k: INTEGER
	
	query: STRING[254]

--standalone imports
%INCLUDE ../util/log_util
%INCLUDE ../util/generic_util

-- requires log_util
%INCLUDE ../util/socket_util
%INCLUDE ../util/file_util
%INCLUDE ../util/stopwatch_util

-- requires socket_util, file_util
%INCLUDE ../util/rest_util


%INCLUDE varlist_parser

BEGIN
initLog('MC:log.txt')
logText('Client BEGIN')
disconnectFromServer(CONNECTION_TAG, socketFile) -- if previous execution was faulty

OPEN FILE timeLog('RW', 'MC:timeLog.txt')

FOR j = 1 TO 10 DO

	startTime(timeRTT)
	
	query = 'GET /xml_endpoint?relative='+CNV_BOOL_STR(relativePos)
	makeRESTCall(query,CONNECTION_TAG, socketFile, pipeFile, pipe_path)
	
	WRITE timeLog('RTT:', stopTime(timeRTT), CR)
	
	startTime(timeXML)
	
	n = parse_varlist(pipeFile, pipe_path, bufferStruct, structs, 16)
	
	WRITE timeLog('XML Parse:',  stopTime(timeXML), CR)
	
ENDFOR
	
FOR i = 1 TO n DO
	WRITE log('Struct ', i, CR)
	WRITE log('	int_val:', structs[i].int_val, CR)
	WRITE log('	float_val:', structs[i].float_val, CR)
	WRITE log('	string_val:', structs[i].string_val, CR)
ENDFOR


CLOSE FILE timeLog
logText('Client END')
END xml_client
	
