PROGRAM xml_client

	%INCLUDE klerxmlf

TYPE
	-- define struct that will be parsed from xml
	struct_t = STRUCTURE
	int_val: INTEGER
	float_val: REAL
	string_val: STRING[32]
	ENDSTRUCTURE

CONST
	-- mandatory global declarations
	PROGRAM_NAME = 'xml_client'
	pipe_path = 'PIP:pipe.dt'
	BUFFER_NAME = 'bufferStruct' -- global ID of var below

VAR
	bufferStruct: struct_t -- buffer for xml_scan, that needs static variable name as parameter
	-- mandatory global declarations
	LOG: FILE
	STATUS: INTEGER

	socketFile: FILE
	pipeFile: FILE
	structs: ARRAY [16] OF struct_t
	i: INTEGER
	n: INTEGER



%INCLUDE ../util/log_util
%INCLUDE ../util/socket_util
%INCLUDE ../util/file_util
--%INCLUDE ../console/print_utils
--%INCLUDE ../socket/socket_utils


%INCLUDE varlist_parser

BEGIN
initLOG('MC:log.txt')
logText('Client BEGIN')

connectToServer('C3:', socketFile)
--connectServ('C3:')
-- socketFile is now initialized & opened
logText('Connection established')

WRITE socketFile('Karel says hello', CR, CR)

OPEN FILE pipeFile('RW', pipe_path)
STATUS = IO_STATUS(pipeFile)
catchError('Could not open pipe file', STATUS)

awaitSocket(socketFile, 100) -- check every 100ms
logText('Received socket message')

fileCopy(socketFile, pipeFile) -- socket -> pipe

CLOSE FILE pipeFile -- needs to be reopened (as RO) to be interpreted as xml
n = parse_varlist(pipeFile, pipe_path, bufferStruct, structs, 16)

FOR i = 1 TO n DO
	WRITE log('Struct ', i, CR)
	WRITE log('	int_val:', structs[i].int_val, CR)
	WRITE log('	float_val:', structs[i].float_val, CR)
	WRITE log('	string_val:', structs[i].string_val, CR)
ENDFOR


CLOSE FILE socketFile
logText('Client END')
END xml_client
