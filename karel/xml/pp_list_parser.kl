-- Parameter Description:

-- xml_file: FILE								... File Variable
--  xml_path: STRING							... File path, needed to open file
-- entry_buffer: picking_point_t				... Global buffer variable, needed for XML_SCAN routine
-- buffer_name: STRING						... Name of global buffer variable in main program,  needed for XML_SCAN routine
-- prog_name: STRING						... Name of main program,  needed for XML_SCAN routine
-- entry_array: ARRAY[*] OF picking_point_t	... Target array to parse file content into

ROUTINE  PARSE_PP_LIST(
xml_file: FILE;
 xml_path: STRING;
entry_buffer: picking_point_t;
buffer_name: STRING;
prog_name: STRING;
entry_array: ARRAY[*] OF picking_point_t) : INTEGER

CONST
	-- preceding tag IDs are reserved for system
	LIST_TAG = 3
	ENTRY_TAG = 4
	
	LIST_KEY = 'pp_list'
	ENTRY_KEY = 'pp'
	
	MAX_TAG_LEN = 16

VAR
	tag_id: INTEGER -- id of last scanned tag
	tag_string: STRING[MAX_TAG_LEN] -- last scanned tagname
	func_code: INTEGER -- tag type of last scan

	list_start: BOOLEAN
	list_end: BOOLEAN

	next_index: INTEGER
	max_index: INTEGER

BEGIN
logText('Parser BEGIN')

 -- close and repoen as read only after setting xml attr
CLOSE FILE xml_file
SET_FILE_ATR (xml_file, ATR_XML)
CLR_IO_STAT(xml_file)
OPEN FILE xml_file('RO', xml_path)
STATUS = IO_STATUS(xml_file)
catchError('Could not open xml_file', STATUS)

-- register tags to be detected by scan
-- Method Signature:
-- XML_ADDTAG(FILE, 'TAG_NAME', TAG_LEN, CASE_SENSITIVE, TAG_ID, STATUS) 
XML_ADDTAG(xml_file, LIST_KEY, MAX_TAG_LEN, FALSE, LIST_TAG, STATUS)
catchError('Register list tag', STATUS)
XML_ADDTAG(xml_file, ENTRY_KEY, MAX_TAG_LEN, FALSE,ENTRY_TAG, STATUS)
catchError('Register entry tag', STATUS)

-- initialize vars
list_start = FALSE
list_end = FALSE
next_index = 1
max_index = ARRAY_LEN(entry_array)

-- scan until list start tag is found
WHILE (list_start = FALSE) DO
	XML_SCAN(xml_file, tag_string, tag_id, func_code, STATUS)
	IF ( STATUS = 0) THEN
		logText('Parser reached EOF')
		CLOSE FILE  xml_file
		RETURN (0)
	ENDIF
	IF (STATUS = XML_FUNCTION) THEN -- scanned a tag
		IF (tag_id = LIST_TAG) THEN
		logText('Found list start')
		list_start = TRUE
		ELSE
		logText('Found some tag')
		ENDIF
	ELSE
	catchError('Failed finding list start', STATUS)
	ENDIF
ENDWHILE

-- scan & add list elements until end tag is found
WHILE ((list_end = FALSE) AND (next_index <= max_index)) DO
	XML_SCAN(xml_file, tag_string, tag_id, func_code, STATUS)
	IF ( STATUS = 0) THEN
		logText('Parser reached EOF')
		CLOSE FILE  xml_file
		RETURN (0)
	ENDIF
	IF (STATUS = XML_FUNCTION) THEN -- scanned a tag
		SELECT tag_id OF
			CASE(LIST_TAG):
				logText('Found list end')
				list_end = TRUE
			CASE(ENTRY_TAG):
				WRITE log('Adding struct: ', next_index, CR)
				-- Method Signature:
				-- XML_SETVAR(FILE, 'PROGRAM_NAME', 'VAR_NAME', STATUS) 
				XML_SETVAR(xml_file, prog_name, buffer_name, STATUS)
				entry_array[next_index] = entry_buffer
				next_index = next_index + 1
		ENDSELECT
	ELSE
	catchError('Failed parsing list', STATUS)
	ENDIF
ENDWHILE

CLOSE FILE  xml_file
logText('Parser END')
-- return how many entries were actually filled
RETURN (next_index-1)
END PARSE_PP_LIST

-- Parameter Description:

-- xml_file: FILE								... File Variable
--  xml_path: STRING							... File path, needed to open file
-- entry_buffer: picking_point_t				... Global buffer variable, needed for XML_SCAN routine
-- buffer_name: STRING						... Name of global buffer variable in main program,  needed for XML_SCAN routine
-- prog_name: STRING						... Name of main program,  needed for XML_SCAN routine

ROUTINE  PARSE_PP_SINGLE(
xml_file: FILE;
 xml_path: STRING;
entry_buffer: picking_point_t;
buffer_name: STRING;
prog_name: STRING)

CONST
	-- preceding tag IDs are reserved for system (1,2)
	ENTRY_TAG = 4
	
	ENTRY_KEY = 'pp'
	
	MAX_TAG_LEN = 16

VAR
	tag_id: INTEGER -- id of last scanned tag
	tag_string: STRING[MAX_TAG_LEN] -- last scanned tagname
	func_code: INTEGER -- tag type of last scan

	list_start: BOOLEAN
	list_end: BOOLEAN

	next_index: INTEGER
	max_index: INTEGER

BEGIN
logText('Parser BEGIN')

 -- close and repoen as read only after setting xml attr
CLOSE FILE xml_file
SET_FILE_ATR (xml_file, ATR_XML)
CLR_IO_STAT(xml_file)
OPEN FILE xml_file('RO', xml_path)
STATUS = IO_STATUS(xml_file)
catchError('Could not open xml_file', STATUS)

-- register tags to be detected by scan
-- Method Signature:
-- XML_ADDTAG(FILE, 'TAG_NAME', TAG_LEN, CASE_SENSITIVE, TAG_ID, STATUS) 
XML_ADDTAG(xml_file, ENTRY_KEY, MAX_TAG_LEN, FALSE,ENTRY_TAG, STATUS)
catchError('Register entry tag', STATUS)

-- initialize vars
list_end = FALSE

-- scan & add one entry
WHILE (list_end = FALSE) DO
XML_SCAN(xml_file, tag_string, tag_id, func_code, STATUS)
IF ( STATUS = 0) THEN
	logText('Parser reached EOF')
	CLOSE FILE  xml_file
	RETURN
ENDIF
IF (STATUS = XML_FUNCTION) THEN -- scanned a tag
	SELECT tag_id OF
		CASE(ENTRY_TAG):
			WRITE log('Adding struct: ', next_index, CR)
			-- Method Signature:
			-- XML_SETVAR(FILE, 'PROGRAM_NAME', 'VAR_NAME', STATUS) 
			XML_SETVAR(xml_file, prog_name, buffer_name, STATUS)
			list_end = TRUE
	ENDSELECT
ELSE
catchError('Failed parsing list', STATUS)
ENDIF
ENDWHILE

CLOSE FILE  xml_file
logText('Parser END')
-- return how many entries were actually filled
END PARSE_PP_SINGLE
