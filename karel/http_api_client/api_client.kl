PROGRAM api_client

%NOLOCKGROUP
%NOPAUSE=ERROR+COMMAND+TPENABLE
%NOBUSYLAMP

-- type definitions in seperate file
%INCLUDE ../xml/xml_types
-- KAREL built-in xml routines
%INCLUDE klerxmlf

CONST

	-- variable names as stings (required for xml parsing)
	PROGRAM_NAME = 'api_client'
	PP_BUFFER_NAME = 'pp_buffer'
	OBJ_BUFFER_NAME = 'obj_buffer'
	
	pipe_path = 'PIP:pipe.dt'
	CONNECTION_TAG = 'C3:'
	
	relative_pos = FALSE

VAR

	coords_6d: ARRAY[6] OF REAL

	-- buffers for xml parsing, named according to consts above
	obj_buffer: picking_object_t
	pp_buffer: picking_pose_t

	-- array of fixed length for storage of API response data
	obj_array: ARRAY [16] OF picking_object_t
	pp_array: ARRAY [16] OF picking_pose_t

	-- storage of target selection
	target_obj_id: STRING[32]
	target_pp_id: STRING[32]

	-- socket file for API queries
	socket_file: FILE
	-- output file for API queries
	pipe_file: FILE
	
	current_pos: XYZWPR
	target_pos: XYZWPR
	
	-- key value pairs for API calls
	pp_query_keys: ARRAY[2] OF STRING[32]
	pp_query_values: ARRAY[2] OF STRING[32]
	
	query: STRING[254]
	query_success: BOOLEAN
	
	STATUS: INTEGER
	n: INTEGER
	
-- dependencies (also transitive dependencies of included files)
%INCLUDE ../util/generic_util
%INCLUDE  ../util/socket_util
%INCLUDE  ../util/file_util
%INCLUDE  ../xml/obj_parser	
%INCLUDE  ../xml/pp_parser
%INCLUDE ../core/core_move
%INCLUDE ../core/core_motion_start
%INCLUDE ../core/core_motion_abort
%INCLUDE  ../util/http_client_util

BEGIN

-- disconnect if previous program termination was faulty
DISCONNECT_FROM_SERVER(CONNECTION_TAG, socket_file)

---------------------------
-- Fetch picking objects
---------------------------

-- use raw query
query = 'GET /objects'
MAKE_HTTP_REQUEST(query,CONNECTION_TAG, socket_file, pipe_file, pipe_path)

n = PARSE_OBJ_LIST(pipe_file, pipe_path, obj_buffer, OBJ_BUFFER_NAME, PROGRAM_NAME, obj_array)

IF(n = 0) THEN
	RETURN
ENDIF

-- choose first
target_obj_id = obj_array[1].id

---------------------------
-- Fetch picking pose
---------------------------

pp_query_keys[1] = 'obj_id'
pp_query_keys[2] = 'relative'

pp_query_values[1] = target_obj_id
pp_query_values[2] = BOOL_TO_STR(relative_pos)

-- use query builder for convenience
query = BUILD_PARAM_REQUEST('GET', 'picking-poses', pp_query_keys, pp_query_values)
MAKE_HTTP_REQUEST(query,CONNECTION_TAG, socket_file, pipe_file, pipe_path)

n = PARSE_PP_LIST(pipe_file, pipe_path, pp_buffer, PP_BUFFER_NAME, PROGRAM_NAME, pp_array)

IF(n = 0) THEN
	RETURN
ENDIF

-- choose first
target_pp_id = pp_array[1].id

-- set correct coordinate frame (for CURPOS routine)
$GROUP[1].$UTOOL = $MNUTOOL[1,1] --uTool 1
$GROUP[1].$UFRAME = $MNUFRAME[1,1] --uFrame 1

-- start from current_pos
current_pos = CURPOS(0,0)
target_pos = current_pos
-- overwrite specific values
target_pos.x =  pp_array[1].x
target_pos.y =  pp_array[1].y
target_pos.z = pp_array[1].z
target_pos.w = pp_array[1].w
target_pos.p = pp_array[1].p
target_pos.r =  pp_array[1].r

-- start robot movement
STATUS = CORE_MOTION_START(FALSE)

---------------------------
-- Track selected picking pose
---------------------------
REPEAT

	-- update motion target
	UPDATE_MOTION_BACKEND(target_pos, FALSE, FALSE)
	-- query API twice per second
	DELAY(500)

	pp_query_keys[1] = 'pp_id' 
	pp_query_keys[2] = 'relative'
	
	pp_query_values[1] = target_pp_id
	pp_query_values[2] = BOOL_TO_STR(relative_pos)
	
	-- use query builder for convenience
	query = BUILD_PARAM_REQUEST('GET', 'track-picking-pose', pp_query_keys, pp_query_values)
	MAKE_HTTP_REQUEST(query,CONNECTION_TAG, socket_file, pipe_file, pipe_path)
	
	query_success = PARSE_PP_SINGLE(pipe_file, pipe_path, pp_buffer, PP_BUFFER_NAME, PROGRAM_NAME)

	IF(NOT query_success) THEN
		RETURN
	ENDIF

	-- update target position variable
	target_pos = current_pos
	target_pos.x =  pp_buffer.x
	target_pos.y =  pp_buffer.y
	target_pos.z = pp_buffer.z
	target_pos.w = pp_buffer.w
	target_pos.p = pp_buffer.p
	target_pos.r = pp_buffer.r
	
-- check for equality within 1mm and 0.1 degrees
UNTIL (XYZWPR_ALMOST_EQUAL(target_pos, current_pos, 1, 0.1))

--terminate robot movement
STATUS = CORE_MOTION_ABORT

END api_client
